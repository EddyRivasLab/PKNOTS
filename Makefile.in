# Makefile for evohmm
# 
SHELL       = /bin/sh

# Installation targets
#
prefix      = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
LIBDIR      = @libdir@
INCLUDEDIR  = @includedir@
BINDIR      = @bindir@
MANDIR      = @mandir@
PDFDIR      = @pdfdir@

MYLIBDIR = -Leasel
MYINCDIR = -Ieasel

LIBS     = -lm
MYLIBS   = -leasel
LFLAGS   = -L../mysource/lib/hmmer4/lib/easel
IFLAGS   = -I../mysource/lib/hmmer4/lib/easel

# Compiler configuration
#
CC       = @CC@
CFLAGS   = @CFLAGS@
AR       = @AR@ rcv
LN       = ln
RANLIB   = @RANLIB@
LDFLAGS  = -static @LDFLAGS@
SIMDFLAGS= @SIMD_CFLAGS@
CPPFLAGS = @CPPFLAGS@
LIBGSL   = @LIBGSL@


#######
## You should not need to modify below this line.
#######

PACKAGE     = @PACKAGE_NAME@
BASENAME    = @PACKAGE_TARNAME@
RELEASE     = @PKNOTS_VERSION@
RELEASEDATE = "@PKNOTS_DATE@"
COPYRIGHT   = "@PKNOTS_COPYRIGHT@"
LICENSELINE = "@PKNOTS_LICENSE@"
COMPRESS    = gzip

# Code manifests
#
PROGS    = src/pknots\

OBJS =	src/pk_cfgio.o\
	src/pk_cyk.o\
	src/pk_fillmtx.o\
	src/pk_filltrvhx.o\
	src/pk_filltrvx.o\
	src/pk_filltrwbx.o\
	src/pk_filltrwhx.o\
	src/pk_filltrwx.o\
	src/pk_filltrzhxyhx.o\
	src/pk_globals.o\
	src/pk_irredsurf.o\
	src/pk_util.o\
	src/pk_model.o\
	src/pk_rnaoutput.o\
	src/pk_rnaparam.o\
	src/pk_trace.o\
	src/pk_tracemtx.o\
	src/pk_vhxgraphs.o\
	src/pk_vxgraphs.o\
	src/pk_wbxgraphs.o\
	src/pk_whxgraphs.o\
	src/pk_wxgraphs.o\
	src/pk_zhxyhxgraphs.o

HDRS =	src/pknots.h\
	src/pk_cfgio.h\
	src/pk_cyk.h\
	src/pk_fillmtx.h\
	src/pk_filltrvhx.h\
	src/pk_filltrvx.h\
	src/pk_filltrwbx.h\
	src/pk_filltrwhx.h\
	src/pk_filltrwx.h\
	src/pk_filltrzhxyhx.h\
	src/pk_irredsurf.h\
	src/pk_util.h\
	src/pk_model.h\
	src/pk_rnaoutput.h\
	src/pk_rnaparam.h\
	src/pk_trace.h\
	src/pk_tracemtx.h\
	src/pk_vhxgraphs.h\
	src/pk_vxgraphs.h\
	src/pk_wbxgraphs.h\
	src/pk_whxgraphs.h\
	src/pk_wxgraphs.h\
	src/pk_zhxyhxgraphs.h


all: ${PROGS} 

${PROGS}: %: %.o ${OBJS}
	${CC} ${MYINCDIR} ${CFLAGS} ${IFLAGS} ${LFLAGS} -o $@ $@.o ${OBJS} ${LIBS} ${MYLIBS} 


.c.o:   
	${CC} ${MYINCDIR} ${IFLAGS} ${LFLAGS} ${CFLAGS} -o $@ -c $<
 

# install:   installs libeasel.a in LIBDIR/
#            installs Easel headers in INCLUDEDIR/
#            installs miniapp binaries in BINDIR/
#
# All install paths are prefaced with DESTDIR/ to facilitate
# building RPMS in Linux distros. Usually DESTDIR is empty.
#
install:
	mkdir -p ${DESTDIR}${LIBDIR}
	mkdir -p ${DESTDIR}${INCLUDEDIR}
	mkdir -p ${DESTDIR}${BINDIR}
	cp libeasel.a ${DESTDIR}${LIBDIR}/
	for file in ${HEADERS}; do\
	   cp $$file ${DESTDIR}${INCLUDEDIR}/;\
	done
	(cd miniapps; make install)

# `make check`: run user testsuite
check:
	(cd testsuite; make check)


clean:
	-rm -f ${PROGS} ${OBJS} libeasel.a  *.tab.c *.output *.o
	-rm -f *~ TAGS
	-rm -f *.gcno *.gcda *.gcov
	-rm -f core.[0-9]*
	-rm -f config.log config.status
	-rm -f example test testdrive stats
	if test -d documentation; then  (cd documentation; make clean); fi
	if test -d testsuite;     then  (cd testsuite;     make clean); fi
	if test -d miniapps;      then  (cd miniapps;      make clean); fi

distclean:
	make clean
	-rm esl_config.h
	-rm -rf autom4te.cache
	if test -d documentation; then (cd documentation; make distclean); fi
	if test -d testsuite;     then (cd testsuite;     make distclean); fi
	if test -d miniapps;      then (cd miniapps;      make distclean); fi
	-rm LICENSE.csh
	-rm Makefile

#######
## Targets below this line are meant for developers, not users.
## Some may only work in context of a developer's Subversion working directory.
#######

# 'make REPOSITORY=... dist' : create a new distribution tarball
#
dist:
	# Make sure we pointed the make dist to a subversion repository
	@if test x${REPOSITORY} = 'x'; then\
	  echo "REPOSITORY isn't set; use make REPOSITORY=... dist";\
	  exit 1;\
	fi
	# Delete any old versions of the same release
	@if test -d ../${BASENAME}-${RELEASE};        then rm -rf ../${BASENAME}-${RELEASE};        fi
	@if test -e ../${BASENAME}-${RELEASE}.tar;    then rm -f  ../${BASENAME}-${RELEASE}.tar;    fi
	@if test -e ../${BASENAME}-${RELEASE}.tar.Z;  then rm -f  ../${BASENAME}-${RELEASE}.tar.Z;  fi
	@if test -e ../${BASENAME}-${RELEASE}.tar.gz; then rm -f  ../${BASENAME}-${RELEASE}.tar.gz; fi
	# Export the release from Subversion control
	svn export ${REPOSITORY} ../${BASENAME}-${RELEASE}
	# Make the configure script from configure.ac
	(cd ../${BASENAME}-${RELEASE};  autoconf)
	# We'll need some basic Makefiles
	(cd ../${BASENAME}-${RELEASE}/; ./configure)
	# Set file permissions.
	find ../${BASENAME}-${RELEASE} -type f -exec chmod +r {} \;
	chmod +x ../${BASENAME}-${RELEASE}/devkit/sqc
	chmod +x ../${BASENAME}-${RELEASE}/devkit/autodoc
	# Compile the PDF documentation and move it to top level dir
	(cd ../${BASENAME}-${RELEASE}/documentation/; make pdf)
	mv ../${BASENAME}-${RELEASE}/documentation/current.pdf  ../${BASENAME}-${RELEASE}/Userguide.pdf
	# Attach license stamps by replacing LICENSE keyword everywhere
	find ../${BASENAME}-${RELEASE} -type f -exec devkit/sedition-pp LICENSE LICENSE.tag {} \;
	# Other keyword replacements
	devkit/sedition RELEASE ${RELEASE} RELEASEDATE ${RELEASEDATE} COPYRIGHT ${COPYRIGHT} ../${BASENAME}-${RELEASE}/00README
	devkit/sedition RELEASE ${RELEASE}                                                   ../${BASENAME}-${RELEASE}/INSTALL
	# Cleanup
	(cd ../${BASENAME}-${RELEASE}/; make implode)
	(cd ../${BASENAME}-${RELEASE}/; make distclean)
	# Packaging
	(cd ..;	tar cvf ${BASENAME}-${RELEASE}.tar ${BASENAME}-${RELEASE})
	(cd ..; ${COMPRESS} ${BASENAME}-${RELEASE}.tar)

# `make dcheck`: run developer testsuite, save output in testsuite/dcheck.report
dcheck:
	(cd testsuite; make dcheck)


# magic SVN for setting keyword ID replacement on a new module foo:
# svn propset svn:keywords "Id" foo.[ch]

################################################################
# @LICENSE@
################################################################
